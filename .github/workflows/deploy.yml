# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: kiwit-backend test & deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


env:
  PORT: ${{ secrets.PORT }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  JWT_SECRET_KEY: ${{ secrets.TEST_JWT_KEY }}
  SWAGGER_ENABLED: false



jobs:
  # Test
  test:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: ${{ secrets.DB_NAME }}
          mysql user: ${{ secrets.DB_USERNAME }}
          mysql password: ${{ secrets.DB_PASSWORD }}

      # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Test with Gradle Wrapper
        run: ./gradlew test --info


  # Deploy
  build:

    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Gradle
        run: ./gradlew clean build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get All Elastic Beanstalk Application version
        id: get-version
        uses: actions/github-script@v7.0.1
        with:
          script: |
            try {
              const execSync = require('child_process').execSync;
            
              function getEBVersionLabel() {
                  const command =
                    'aws elasticbeanstalk describe-application-versions --application-name kiwit-backend';
            
                  const stdout = execSync(command).toString();
            
                  const result = JSON.parse(stdout);
                  const latestVersion = result['ApplicationVersions'][0]['VersionLabel'];
            
                  core.exportVariable("NEW_VERSION", parseInt(latestVersion) + 1);
              }
            
              getEBVersionLabel();
            } catch (e) {
              core.error("Error while reading or parsing the JSON")
              core.setFailed(e)
            }

      - name: Docker Image Build
        run: |
          docker build -t kiwit-backend:${{ env.NEW_VERSION }} .
          docker tag kiwit-backend:${{ env.NEW_VERSION }} ${{ secrets.AWS_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/kiwit-backend:${{ env.NEW_VERSION }}
          docker tag kiwit-backend:${{ env.NEW_VERSION }} ${{ secrets.AWS_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/kiwit-backend:latest

      - name: AWS ECR Login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker Image AWS ECR Push
        run: |
          docker push ${{ secrets.AWS_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/kiwit-backend:${{ env.NEW_VERSION }}
          docker push ${{ secrets.AWS_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/kiwit-backend:latest

      # aws s3 cp Dockerrun.aws.json s3://kiwit-dockerrun/backend/Dockerrun.aws.json
      - name: Deploy Elastic Beanstalk
        run: |
          aws elasticbeanstalk create-application-version --region ${{ secrets.AWS_REGION }} --application-name kiwit-backend --version-label ${{ env.NEW_VERSION }} --description "${{ github.event.head_commit.message }}" --source-bundle S3Bucket=kiwit-dockerrun,S3Key=backend/Dockerrun.aws.json
          aws elasticbeanstalk update-environment --region ${{ secrets.AWS_REGION }} --environment-name kiwit-backend --version-label ${{ env.NEW_VERSION }}
        
    

    

